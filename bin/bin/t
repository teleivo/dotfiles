#!/bin/bash
#
# Create a new or attach to an existing tmux session named after the basename
# of a directory. The directory selection is done via
# https://github.com/junegunn/fzf
#
# fzf is fed with .git projects using the arg as the initial query. If there is only one match for
# the initial query fzf will not start its interactive finder. The result from fzf is used to open
# a new or attach to an existing session with the projects basename.
#
# You can call/bind this to a key in tmux to open it as a popup or immediately switch to a
# frequently used session.

proj_root="$HOME/code"
proj="$1"

if ! dir=$(fd --unrestricted --exclude target --exclude .terraform --type dir --base-directory "$proj_root" "\.git$" --format "{//}" |
    fzf --tmux center,55% --reverse --prompt="Open in tmux session $proj_root> " --cycle --query "$proj" --select-1); then
  exit 0
fi
path_name="$proj_root/${dir}"
session_name=$(basename "$dir")
# tmux sessions cannot contain . or : which will be replaced by tmux. these chars need to be
# replaced or they won't be found
session_name=${session_name//./_}
session_name=${session_name//:/_}

not_in_tmux() {
  [ -z "$TMUX" ]
}

if not_in_tmux; then
   tmux new-session -A -s "$session_name" -c "$path_name"
else
  # -t= is needed as it uses prefix matching otherwise
  if ! tmux has-session -t="$session_name" 2>/dev/null; then
    (
      TMUX=''
      tmux new-session -Ad -s "$session_name" -c "$path_name" nvim
      # without targeting a specific window it uses prefix matching of session names
      tmux split-window -v -t "$session_name:1" -c "$path_name" -p 30
      tmux select-pane -t "$session_name:1.1"
    )
  fi
  tmux switch-client -t="$session_name"
fi
